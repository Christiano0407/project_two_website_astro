---

import Layouts from "../layouts/Layouts.astro";
import BlogPost from "../../src/components/posts/BlogPost.astro"; 
import type { MarkdownInstance } from 'astro';


const pageTitle = "My First Blog Post With Astro"

const allPostNeswletter = await Astro.glob("../../src/pages/newsletters/*.md")

function generatePostUrl(post: MarkdownInstance<Record<string, any>>): string {
  if (!post.file) {
    console.error('Post file is undefined', post);
    return '#'; // Devuelve una URL por defecto o maneja el error según sea necesario
  }
  
  const slug = post.file.split('/').pop()?.replace('.md', '');
  return slug ? `/newsletters/${slug}` : '#';
}

/* Tipo MarkdownInstance:
Hemos cambiado la firma de la función generatePostUrl para aceptar MarkdownInstance<Record<string, any>>, que es el tipo correcto para las instancias de markdown en Astro. */

---

<Layouts title={pageTitle} description="Page Website Blog">
  <main class="flex-1 flex flex-col relative" >
    <div class="w-full max-w-[1024px] mx-auto">
      <img class="w-full max-w-[100%] h-auto object-cover bg-cover bg-center bg-no-repeat md:min-h-[24rem] aspect-square md:aspect-video" src="../../src/assets/img/blog/astro_blog.webp" alt="astro blog" />
    </div>
    <article>
      {allPostNeswletter.map(post => {
        const postUrl = generatePostUrl(post);
        return (
          <article class="mt-4">
            <BlogPost url={postUrl} title={post.frontmatter.title} />
          </article>
        );
      })}
    </article>
   </main>
</Layouts>